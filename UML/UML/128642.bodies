class GraphicsM
!!!131074.cpp!!!	GraphicsM()

	/* TO DO: add relevant code */

	return;			
!!!131202.cpp!!!	~GraphicsM()

	/* TO DO: add relevant code */

	graphicsCleanUp();

	return;			
!!!131330.cpp!!!	initMemDC(in hWnd : HWND) : void

	HBITMAP		hBitMap;					/* handle to bitmap */
	HDC			hdc = GetDC(hWnd); 			/* get handle to device context */

	backBufWidth = viewport.right;
	backBufHeight = viewport.bottom;

	hMdc = CreateCompatibleDC(hdc);			/* get handle to memory device context
        									(which will hold bitmap prior to actual display) */
	/* create bitmap (back buffer) which is compatible with display device context */
	hBitMap = CreateCompatibleBitmap(hdc, backBufWidth, backBufHeight);
	SelectObject(hMdc, hBitMap);			/* select bitmap into memory device context */
	PatBlt(hMdc, 0, 0, backBufWidth, backBufHeight, PATCOPY);	/* Erase current content
        					of bitmap-buffer by setting bitmap to background colour of window */

	ReleaseDC(hWnd, hdc); 					/* release device context */
!!!131458.cpp!!!	graphicsModuleInit(in hWnd : HWND) : int

	/* TO DO: add relevant code */
	

	/* Set viewport */
	setViewport();

	/* Initialise back buffer */
	initMemDC(hWnd);

	return 1;
!!!131586.cpp!!!	graphicsCleanUp() : void

	/* TO DO: add relevant code */


	return;
!!!131714.cpp!!!	setViewport() : int

	/* TO DO: add relevant code */
	/* Set viewport */
	viewport.left = 10; viewport.top = 10; viewport.right = 1034; viewport.bottom = 778;
	
	return 1;
!!!131842.cpp!!!	drawHUD() : int

	/* GDI variables */
	HGDIOBJ		hPreviousBrush;		// handle for previous brush
	HBRUSH		hBlueBrush;			// handle for blue custom brush
	HBRUSH		hBrownBrush;		// handle for brown custom brush

	/* TO DO: add relevant code */

	// sky (blue colour)
	hBlueBrush = CreateSolidBrush(RGB(0,192,255));	// blue brush
	hPreviousBrush = SelectObject(hMdc, hBlueBrush);
	Rectangle(hMdc, viewport.left, viewport.top, viewport.right, viewport.bottom);
	SelectObject(hMdc, hPreviousBrush);	// restore previous brush
    // free resources which are no longer needed
    DeleteObject(hBlueBrush);

	// ground (brown colour)
	hBrownBrush = CreateSolidBrush(RGB(255,128,64));	// brown brush
	hPreviousBrush = SelectObject(hMdc, hBrownBrush);
	Rectangle(hMdc, viewport.left, viewport.bottom - 40, viewport.right, viewport.bottom);
	SelectObject(hMdc, hPreviousBrush);	// restore previous brush
    // free resources which are no longer needed
    DeleteObject(hBrownBrush);

	return 1;
!!!131970.cpp!!!	drawPolygon(in polygon : Point2D, in vertexCount : int, in closed : bool) : int

	/* display polygon */
	// draw outline GameObject using current pen
	MoveToEx(hMdc, (int)(polygon[0].x + 0.5), (int)(polygon[0].y + 0.5), NULL);
	for (int i = 1; i < vertexCount; ++i)
		LineTo(hMdc, (int)(polygon[i].x + 0.5), (int)(polygon[i].y + 0.5));

	if (closed == true)	// closed polygon
		LineTo(hMdc, (int)(polygon[0].x + 0.5), (int)(polygon[0].y + 0.5));

	return 1;
!!!132098.cpp!!!	displayBackBuffer(in hWnd : HWND) : int

	HDC         	hdc ;			/* handle to device context */

	// Display back-buffer bitmap (transfer it from memory to display) 
	hdc = GetDC(hWnd);	// get handle to device context
	// dipslay back-buffer bitmap (i.e. transfer it from memory to display) */
	BitBlt(hdc, 0, 0, backBufWidth, backBufHeight, hMdc, 0, 0, SRCCOPY);

	/* release device context */
	ReleaseDC (hWnd, hdc);

	return 1;
