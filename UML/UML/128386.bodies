class GameObject
!!!128770.cpp!!!	slopeBetweenPoints(in i : int, in k : int) : float

	if((gameObject[k].x - gameObject[i].x == 0)||
		(gameObject[k].y - gameObject[i].y == 0))
	{
		return 0.0F;
	}
	else 
	{
		return (gameObject[i].y - gameObject[k].y)/(gameObject[i].x - gameObject[k].x);
	}

!!!128898.cpp!!!	GameObject()


!!!129026.cpp!!!	~GameObject()

	/* TO DO: add relevant code */

	gameObjectCleanUp();

	return;			
!!!129154.cpp!!!	particle() : ParticleModel

	return par;
!!!129282.cpp!!!	friction() : Friction

	return fric;
!!!129410.cpp!!!	gameObjectCleanUp() : void

	/* TO DO: add relevant code */

	return;			
!!!129538.cpp!!!	setGameObject2Point() : void

    /* Load polygon (game object) data into vertex array */
    gameObject[0].x = 0.0F;	gameObject[0].y = 0.0F;
    gameObject[1].x = 1.0F;	gameObject[1].y = 0.0F;
    gameObject[2].x = 1.0F;	gameObject[2].y = 1.0F;
    gameObject[3].x = 0.0F;	gameObject[3].y = 1.0F;
	slopes();
!!!129666.cpp!!!	setGameObject2Square() : void

    /* Load polygon (game object) data into vertex array */
    gameObject[0].x = 0.0F;		gameObject[0].y = 0.0F;
    gameObject[1].x = 10.0F;	gameObject[1].y = 0.0F;
    gameObject[2].x = 10.0F;	gameObject[2].y = 10.0F;
    gameObject[3].x = 0.0F;		gameObject[3].y = 10.0F;
	slopes();
!!!129794.cpp!!!	setGameObjectUp(in p1x : float, in p1y : float, in p2x : float, in p2y : float, in p3x : float, in p3y : float, in p4x : float, in p4y : float) : void

	gameObject[0].x = p1x;	gameObject[0].y = p1y;
    gameObject[1].x = p2x;	gameObject[1].y = p2y;
    gameObject[2].x = p3x;	gameObject[2].y = p3y;
    gameObject[3].x = p4x;	gameObject[3].y = p4y;
	slopes();
!!!129922.cpp!!!	setDrawPart(in draw : bool) : void

	drawPart = draw;
!!!130050.cpp!!!	getDrawPart() : bool

	return drawPart;
!!!130178.cpp!!!	dispBufUpdate() : int

	/* TO DO: add relevant code */

	// update display object (content of display buffer (with calculated vertex coordinates of square at its current position))
	for (int vert = 0; vert < 4; ++vert)
	  {
		  dispBuffObj[vert].x = gameObject[vert].x + par->getPosition().x;
		  dispBuffObj[vert].y = gameObject[vert].y + par->getPosition().y;
	  }

	return 1;
!!!130306.cpp!!!	GameObjectInit() : int

	/* TO DO: add relevant code */

	// Initialise dynamics parameters (for physics simulation) of world objects
	par = new ParticleModel();
	fric = new Friction();

	/* TO DO: Call functions to set other particle model parameters, e.g. velocity, acceleration, ... */

    // Initialise appearance parameters of game object
	setGameObject2Square();         /* Set game object of object to square */
    
	for(int i = 0; i < 4; i++)
	{
		slopeSides[i] =0.0F; 
	}

	return 1;
!!!130434.cpp!!!	draw(inout pGraphicsModule : GraphicsM) : int

	if(drawPart)
	{
		dispBufUpdate();	// update content of display buffer (with outline of square at its current position)
		pGraphicsModule->drawPolygon(dispBuffObj, 4, true); // display content of buffer
		return 1;
	}
	return 0;
!!!130562.cpp!!!	slopes() : void

	slopeSides[0] = slopeBetweenPoints(0,1);
	slopeSides[1] = slopeBetweenPoints(1,2);
	slopeSides[2] = slopeBetweenPoints(2,3);
	slopeSides[3] = slopeBetweenPoints(0,3);
!!!130690.cpp!!!	slop(in i : int) : float

	return slopeSides[i];
!!!130818.cpp!!!	pointOnLine(in index : int) : Point2D

	Point2D point; 
	point.x = gameObject[index].x + par->getPosition().x;
	point.y = gameObject[index].y + par->getPosition().y;
	return point;
!!!130946.cpp!!!	GameObjectPoint(in index : int) : Point2D

	Point2D  temp;
		temp.x = gameObject[index].x;
		temp.y = gameObject[index].y;
	return temp;
